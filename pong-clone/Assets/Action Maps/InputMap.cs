//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Action Maps/InputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMap"",
    ""maps"": [
        {
            ""name"": ""LeftPaddle"",
            ""id"": ""2ad74d81-4adc-4368-9619-2e3eab88404d"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""bf0f6b63-721f-461f-815e-8f7823af3da9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""UpDown"",
                    ""id"": ""bdae8e61-5334-40de-a0ef-de1b5cfa2a2f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e6608c24-4d5c-4c62-b7ad-f11222797891"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""fa9a30d1-654d-4cc0-99f2-564a1d3c96de"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""RightPaddle"",
            ""id"": ""ae6c5268-b52f-409b-9dac-ecedfa14f0e6"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""dc477a79-f22f-42e2-872e-fe6acf7e4ed5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""UpDown"",
                    ""id"": ""85f0d1c0-2638-4c3e-a232-ee56d47743b4"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""f073f06e-9b9d-4da4-87da-6fba1c24c739"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""de240d8b-8800-47e4-abc2-038dfc33203c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // LeftPaddle
        m_LeftPaddle = asset.FindActionMap("LeftPaddle", throwIfNotFound: true);
        m_LeftPaddle_Move = m_LeftPaddle.FindAction("Move", throwIfNotFound: true);
        // RightPaddle
        m_RightPaddle = asset.FindActionMap("RightPaddle", throwIfNotFound: true);
        m_RightPaddle_Move = m_RightPaddle.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LeftPaddle
    private readonly InputActionMap m_LeftPaddle;
    private ILeftPaddleActions m_LeftPaddleActionsCallbackInterface;
    private readonly InputAction m_LeftPaddle_Move;
    public struct LeftPaddleActions
    {
        private @InputMap m_Wrapper;
        public LeftPaddleActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_LeftPaddle_Move;
        public InputActionMap Get() { return m_Wrapper.m_LeftPaddle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftPaddleActions set) { return set.Get(); }
        public void SetCallbacks(ILeftPaddleActions instance)
        {
            if (m_Wrapper.m_LeftPaddleActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_LeftPaddleActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_LeftPaddleActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_LeftPaddleActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_LeftPaddleActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public LeftPaddleActions @LeftPaddle => new LeftPaddleActions(this);

    // RightPaddle
    private readonly InputActionMap m_RightPaddle;
    private IRightPaddleActions m_RightPaddleActionsCallbackInterface;
    private readonly InputAction m_RightPaddle_Move;
    public struct RightPaddleActions
    {
        private @InputMap m_Wrapper;
        public RightPaddleActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_RightPaddle_Move;
        public InputActionMap Get() { return m_Wrapper.m_RightPaddle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightPaddleActions set) { return set.Get(); }
        public void SetCallbacks(IRightPaddleActions instance)
        {
            if (m_Wrapper.m_RightPaddleActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_RightPaddleActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_RightPaddleActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_RightPaddleActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_RightPaddleActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public RightPaddleActions @RightPaddle => new RightPaddleActions(this);
    public interface ILeftPaddleActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IRightPaddleActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
